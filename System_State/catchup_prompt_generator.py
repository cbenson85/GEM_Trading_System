#!/usr/bin/env python3
"""
GEM Trading System - Catch-Up Prompt Auto-Generator
Maintains a comprehensive prompt for AI context continuity
"""

import json
import os
from datetime import datetime

class CatchUpPromptGenerator:
    def __init__(self):
        self.template = """# GEM Trading System - AI Catch-Up Prompt
**Last Updated**: {timestamp}
**System Version**: {version}
**Current Phase**: {current_phase}

---

## üéØ CRITICAL CONTEXT

### What You're Walking Into
{situation_summary}

### Immediate Priority
{immediate_priority}

---

## üìä SYSTEM STATUS

### Current State
- **Portfolio**: {portfolio_status}
- **Cash Available**: {cash_available}
- **System Stage**: {system_stage}
- **Last Completed Phase**: {last_phase}
- **Next Phase**: {next_phase}

### Data Verification Status
{data_verification_status}

---

## üóÇÔ∏è FILE STRUCTURE & LOCATIONS

### Core System Files (VERIFIED)
{verified_files}

### Data Files (Location & Status)
{data_files}

### Unverified/Archived Content
{unverified_content}

---

## üî¨ BACKTESTING METHODOLOGY

### Approach
{backtesting_approach}

### Current Progress
{backtesting_progress}

### Data Sources
{data_sources}

---

## üìà DISCOVERED PATTERNS

### Verified Correlations
{verified_patterns}

### Current Scoring Criteria
{scoring_criteria}

### Refinement History
{refinement_history}

---

## üéØ DECISIONS MADE

### Key Decisions
{key_decisions}

### Rules Established
{rules_established}

---

## üìù WHAT NEEDS TO HAPPEN NEXT

### Immediate Next Steps
{next_steps}

### Blockers/Questions
{blockers}

---

## üîó IMPORTANT LINKS

- **GitHub Repo**: https://github.com/cbenson85/GEM_Trading_System
- **Polygon API**: Developer tier (key: pvv6DNmKAoxojCc0B5HOaji6I_k1egv0)
- **Data Storage**: {data_storage_location}

---

## üíæ PROGRESS LOG

{progress_log}

---

## ‚ö†Ô∏è CRITICAL REMINDERS

1. **NO FABRICATION**: All data must be verified. If unsure, say so immediately.
2. **FALSE MISS PRINCIPLE**: When backtesting, check discarded stocks for explosive growth
3. **USER DOES COPY/PASTE ONLY**: All automation, no manual data entry for user
4. **STORE EVERYTHING**: All backtest data, decisions, refinements must be saved
5. **10-YEAR VALIDATION**: System must work consistently across 10 years before live use

---

## üöÄ HOW TO CONTINUE

1. Read this entire prompt
2. Ask clarifying questions if anything is unclear
3. Confirm you understand current state and next phase
4. Wait for user approval before proceeding
5. Update this prompt after each phase completion

---

**END OF CATCH-UP PROMPT**
Generated by: GEM Catch-Up Prompt System v1.0
"""
        
        self.state_file = "system_state.json"
        self.load_state()
    
    def load_state(self):
        """Load current system state"""
        if os.path.exists(self.state_file):
            with open(self.state_file, 'r') as f:
                self.state = json.load(f)
        else:
            # Initialize default state
            self.state = {
                "version": "5.0.1-REBUILD",
                "current_phase": "Phase 2: System Requirements & Data Infrastructure",
                "situation_summary": "System being rebuilt from ground up. Previous model fabricated backtest data. Starting fresh with verified data only.",
                "immediate_priority": "Build catch-up prompt system, then create data infrastructure for verified backtesting",
                "portfolio_status": "CLEARED - Starting fresh",
                "cash_available": "$10,000 (reset)",
                "system_stage": "Pre-Development - Planning & Infrastructure",
                "last_phase": "Phase 1: Discovery & Documentation Audit - COMPLETE",
                "next_phase": "Phase 2: System Requirements & Data Infrastructure",
                "data_verification_status": """
- Current Prices: ‚úÖ VERIFIED (Polygon API)
- Volume Data: ‚úÖ VERIFIED (Polygon API)
- Float Data: ‚ö†Ô∏è PARTIAL (Polygon API - not all stocks)
- Backtest Results: ‚ùå UNVERIFIED (marked for removal)
- Catalyst Data: ‚ùå NOT YET IMPLEMENTED
- Historical Analysis: ‚ùå NOT YET STARTED
                """,
                "verified_files": """
- `/Current_System/GEM_v5_Master_Screening_Protocol.md` - Core screening rules
- `/Current_System/Trading_Rules_Complete.md` - Trading operations guide
- `/Polygon_Integration/daily_screener.py` - Working Polygon integration
- `/Daily_Operations/CURRENT_UPDATE.md` - Daily update template
                """,
                "data_files": """
- `/Verified_Backtest_Data/` - TO BE CREATED
- `/Verified_Backtest_Data/explosive_stocks_catalog.json` - TO BE CREATED
- `/Verified_Backtest_Data/pre_catalyst_analysis/` - TO BE CREATED
- `/Verified_Backtest_Data/backtest_runs/` - TO BE CREATED
                """,
                "unverified_content": """
- `/Backtest_Results/` - MARKED UNVERIFIED, kept as framework reference
- `/Strategy_Evolution/` - MARKED UNVERIFIED, contains unproven claims
- All Python backtest scripts - MARKED UNVERIFIED, frameworks only
                """,
                "backtesting_approach": """
1. Find stocks with 500%+ gains in any 6-month window (last 10 years)
2. Deep dive into 180 days PRE-CATALYST for each stock
3. Analyze: price, volume, sentiment, leadership, news, patterns
4. Identify correlations between explosive stocks
5. Build screener based on correlations
6. Backtest on random historical dates
7. Apply FALSE MISS principle to discarded stocks
8. Track picks AND discards with full performance data
9. Refine until consistent 10-year performance
10. Store ALL data for future refinement
                """,
                "backtesting_progress": "NOT STARTED - Building infrastructure first",
                "data_sources": """
- Price/Volume: Polygon API (Developer tier) + Yahoo Finance backup
- News/Sentiment: Web scraping (Google, Yahoo Finance)
- Insider Trading: Free sources (Finviz, OpenInsider, SEC Form 4)
- SEC Filings: SEC EDGAR (free)
- Float/Shares: Polygon API + manual verification
                """,
                "verified_patterns": "NONE YET - Will be discovered during analysis phase",
                "scoring_criteria": "CURRENT v5.0.1 CRITERIA - Will be updated based on pattern discovery",
                "refinement_history": [],
                "key_decisions": [
                    "Mark all previous backtest results as UNVERIFIED",
                    "Clear all current portfolio positions - starting fresh",
                    "Build from verified data only - no fabrication",
                    "Use 500%+ in 6 months as explosive stock criteria",
                    "Analyze 180 days pre-catalyst for pattern discovery",
                    "Store all backtest data (picks AND discards) for refinement",
                    "Apply false miss principle in all backtests",
                    "User only does copy/paste - full automation required",
                    "Free data sources only (no paid APIs except Polygon)"
                ],
                "rules_established": [
                    "NEVER fabricate data - verify or say you can't",
                    "FALSE MISS CHECK - Always check discarded stocks for explosive growth",
                    "STORE EVERYTHING - All decisions, data, refinements must be saved",
                    "COPY/PASTE ONLY - User should never manually enter data",
                    "10-YEAR VALIDATION - System must prove consistency before live trading"
                ],
                "next_steps": [
                    "1. Create catch-up prompt system (IN PROGRESS)",
                    "2. Build data infrastructure folders and files",
                    "3. Create explosive stock discovery script",
                    "4. Run 10-year scan for 500%+ stocks",
                    "5. Build pre-catalyst analysis framework",
                    "6. Begin deep-dive analyses"
                ],
                "blockers": "None currently",
                "data_storage_location": "/Verified_Backtest_Data/ (to be created in GitHub)",
                "progress_log": [
                    {
                        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                        "phase": "Phase 1",
                        "action": "Completed audit of existing system",
                        "result": "Identified fabricated backtest data, cleared portfolio, established new methodology"
                    },
                    {
                        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                        "phase": "Phase 2",
                        "action": "Creating catch-up prompt system",
                        "result": "IN PROGRESS"
                    }
                ]
            }
            self.save_state()
    
    def save_state(self):
        """Save current state to file"""
        with open(self.state_file, 'w') as f:
            json.dump(self.state, f, indent=2)
    
    def generate_prompt(self):
        """Generate the catch-up prompt"""
        # Format progress log
        progress_log_text = ""
        for entry in self.state.get("progress_log", []):
            progress_log_text += f"\n**{entry['date']}** - {entry['phase']}\n"
            progress_log_text += f"- Action: {entry['action']}\n"
            progress_log_text += f"- Result: {entry['result']}\n"
        
        # Format refinement history
        refinement_text = ""
        if self.state.get("refinement_history"):
            for ref in self.state["refinement_history"]:
                refinement_text += f"\n- **{ref['date']}**: {ref['change']} (Reason: {ref['reason']})\n"
        else:
            refinement_text = "No refinements yet - starting fresh"
        
        # Format key decisions
        decisions_text = ""
        for i, decision in enumerate(self.state.get("key_decisions", []), 1):
            decisions_text += f"{i}. {decision}\n"
        
        # Format rules
        rules_text = ""
        for i, rule in enumerate(self.state.get("rules_established", []), 1):
            rules_text += f"{i}. {rule}\n"
        
        # Format next steps
        steps_text = ""
        for step in self.state.get("next_steps", []):
            steps_text += f"{step}\n"
        
        # Generate prompt
        prompt = self.template.format(
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            version=self.state.get("version", "Unknown"),
            current_phase=self.state.get("current_phase", "Unknown"),
            situation_summary=self.state.get("situation_summary", ""),
            immediate_priority=self.state.get("immediate_priority", ""),
            portfolio_status=self.state.get("portfolio_status", ""),
            cash_available=self.state.get("cash_available", ""),
            system_stage=self.state.get("system_stage", ""),
            last_phase=self.state.get("last_phase", ""),
            next_phase=self.state.get("next_phase", ""),
            data_verification_status=self.state.get("data_verification_status", ""),
            verified_files=self.state.get("verified_files", ""),
            data_files=self.state.get("data_files", ""),
            unverified_content=self.state.get("unverified_content", ""),
            backtesting_approach=self.state.get("backtesting_approach", ""),
            backtesting_progress=self.state.get("backtesting_progress", ""),
            data_sources=self.state.get("data_sources", ""),
            verified_patterns=self.state.get("verified_patterns", ""),
            scoring_criteria=self.state.get("scoring_criteria", ""),
            refinement_history=refinement_text,
            key_decisions=decisions_text,
            rules_established=rules_text,
            next_steps=steps_text,
            blockers=self.state.get("blockers", "None"),
            data_storage_location=self.state.get("data_storage_location", ""),
            progress_log=progress_log_text
        )
        
        return prompt
    
    def update_progress(self, phase, action, result):
        """Add entry to progress log"""
        self.state["progress_log"].append({
            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "phase": phase,
            "action": action,
            "result": result
        })
        self.save_state()
    
    def update_current_phase(self, phase_name, immediate_priority):
        """Update current phase"""
        self.state["current_phase"] = phase_name
        self.state["immediate_priority"] = immediate_priority
        self.save_state()
    
    def add_refinement(self, change, reason):
        """Add refinement to history"""
        if "refinement_history" not in self.state:
            self.state["refinement_history"] = []
        self.state["refinement_history"].append({
            "date": datetime.now().strftime("%Y-%m-%d"),
            "change": change,
            "reason": reason
        })
        self.save_state()

if __name__ == "__main__":
    generator = CatchUpPromptGenerator()
    prompt = generator.generate_prompt()
    
    # Save to file
    with open("CURRENT_CATCHUP_PROMPT.md", 'w') as f:
        f.write(prompt)
    
    print("‚úÖ Catch-up prompt generated!")
    print(f"üìÑ Saved to: CURRENT_CATCHUP_PROMPT.md")
    print(f"üìä State saved to: system_state.json")
    print(f"\nPrompt length: {len(prompt)} characters")
